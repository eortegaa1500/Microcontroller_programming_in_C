CCS PCH C Compiler, Version 4.104, 5967               25-abr.-18 11:25

               Filename: I:\Archivos\PIC\Clase 7\c7_3\main.lst

               ROM used: 946 bytes (3%)
                         Largest free fragment is 31822
               RAM used: 6 (0%) at main() level
                         22 (1%) worst case
               Stack:    6 locations

*
0000:  GOTO   028E
.................... #include "I:\Archivos\PIC\Clase 7\c7_3\main.h" 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO              	//Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES PUT                   	//Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN              	//PORTB pins are configured as digital I/O on RESET 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOMCLR                	//Master Clear pin used for I/O 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                 	//Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES ICPRT                 	//ICPRT enabled 
....................  
.................... #use delay(clock=8000000) 
*
0018:  CLRF   FEA
001A:  MOVLW  0D
001C:  MOVWF  FE9
001E:  MOVF   FEF,W
0020:  BZ    003C
0022:  MOVLW  02
0024:  MOVWF  01
0026:  CLRF   00
0028:  DECFSZ 00,F
002A:  BRA    0028
002C:  DECFSZ 01,F
002E:  BRA    0026
0030:  MOVLW  97
0032:  MOVWF  00
0034:  DECFSZ 00,F
0036:  BRA    0034
0038:  DECFSZ FEF,F
003A:  BRA    0022
003C:  RETLW  00
....................  
....................  
....................  
....................  
.................... #define LCD_TYPE 2 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0064:  MOVLW  0F
0066:  ANDWF  F95,W
0068:  IORLW  F0
006A:  MOVWF  F95
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
006C:  BSF    F8C.2
....................    delay_cycles(1); 
006E:  NOP   
....................    lcd_output_enable(1); 
0070:  BSF    F8C.0
....................    delay_cycles(1); 
0072:  NOP   
....................    high = lcd_read_nibble(); 
0074:  RCALL  0058
0076:  MOVFF  01,14
....................        
....................    lcd_output_enable(0); 
007A:  BCF    F8C.0
....................    delay_cycles(1); 
007C:  NOP   
....................    lcd_output_enable(1); 
007E:  BSF    F8C.0
....................    delay_us(1); 
0080:  BRA    0082
....................    low = lcd_read_nibble(); 
0082:  RCALL  0058
0084:  MOVFF  01,13
....................        
....................    lcd_output_enable(0); 
0088:  BCF    F8C.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008A:  MOVLW  0F
008C:  ANDWF  F95,W
008E:  MOVWF  F95
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0090:  SWAPF  14,W
0092:  MOVWF  00
0094:  MOVLW  F0
0096:  ANDWF  00,F
0098:  MOVF   00,W
009A:  IORWF  13,W
009C:  MOVWF  01
.................... } 
009E:  GOTO   00A6 (RETURN)
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0058:  MOVF   F83,W
005A:  MOVWF  00
005C:  SWAPF  00,W
005E:  ANDLW  0F
0060:  MOVWF  01
....................   #endif 
.................... } 
0062:  RETLW  00
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
003E:  SWAPF  14,W
0040:  ANDLW  F0
0042:  MOVWF  00
0044:  MOVLW  0F
0046:  ANDWF  F8C,W
0048:  IORWF  00,W
004A:  MOVWF  F8C
....................   #endif 
....................        
....................    delay_cycles(1); 
004C:  NOP   
....................    lcd_output_enable(1); 
004E:  BSF    F8C.0
....................    delay_us(2); 
0050:  BRA    0052
0052:  BRA    0054
....................    lcd_output_enable(0); 
0054:  BCF    F8C.0
.................... } 
0056:  RETLW  00
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
00A2:  BCF    F8C.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
00A4:  BRA    0064
00A6:  MOVFF  01,13
00AA:  BTFSC  01.7
00AC:  BRA    00A4
....................    lcd_output_rs(address); 
00AE:  BCF    F8C.1
00B0:  BTFSC  11.0
00B2:  BSF    F8C.1
....................    delay_cycles(1); 
00B4:  NOP   
....................    lcd_output_rw(0); 
00B6:  BCF    F8C.2
....................    delay_cycles(1); 
00B8:  NOP   
....................    lcd_output_enable(0); 
00BA:  BCF    F8C.0
....................    lcd_send_nibble(n >> 4); 
00BC:  SWAPF  12,W
00BE:  MOVWF  13
00C0:  MOVLW  0F
00C2:  ANDWF  13,F
00C4:  MOVFF  13,14
00C8:  RCALL  003E
....................    lcd_send_nibble(n & 0xf); 
00CA:  MOVF   12,W
00CC:  ANDLW  0F
00CE:  MOVWF  13
00D0:  MOVWF  14
00D2:  RCALL  003E
.................... } 
00D4:  RETLW  00
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00D6:  MOVLW  0F
00D8:  ANDWF  F95,W
00DA:  MOVWF  F95
....................   #endif 
....................    lcd_enable_tris(); 
00DC:  BCF    F95.0
....................    lcd_rs_tris(); 
00DE:  BCF    F95.1
....................    lcd_rw_tris(); 
00E0:  BCF    F95.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00E2:  BCF    F8C.1
....................    lcd_output_rw(0); 
00E4:  BCF    F8C.2
....................    lcd_output_enable(0); 
00E6:  BCF    F8C.0
....................      
....................    delay_ms(15); 
00E8:  MOVLW  0F
00EA:  MOVWF  0D
00EC:  RCALL  0018
....................    for(i=1;i<=3;++i) 
00EE:  MOVLW  01
00F0:  MOVWF  06
00F2:  MOVF   06,W
00F4:  SUBLW  03
00F6:  BNC   0108
....................    { 
....................        lcd_send_nibble(3); 
00F8:  MOVLW  03
00FA:  MOVWF  14
00FC:  RCALL  003E
....................        delay_ms(5); 
00FE:  MOVLW  05
0100:  MOVWF  0D
0102:  RCALL  0018
....................    } 
0104:  INCF   06,F
0106:  BRA    00F2
....................      
....................    lcd_send_nibble(2); 
0108:  MOVLW  02
010A:  MOVWF  14
010C:  RCALL  003E
....................    for(i=0;i<=3;++i) 
010E:  CLRF   06
0110:  MOVF   06,W
0112:  SUBLW  03
0114:  BNC   0132
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0116:  CLRF   03
0118:  MOVF   06,W
011A:  MOVFF  FF2,07
011E:  BCF    FF2.7
0120:  RCALL  0004
0122:  BTFSC  07.7
0124:  BSF    FF2.7
0126:  MOVWF  07
0128:  CLRF   11
012A:  MOVWF  12
012C:  RCALL  00A2
012E:  INCF   06,F
0130:  BRA    0110
.................... } 
0132:  GOTO   02B0 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
0136:  DECFSZ 0E,W
0138:  BRA    013C
013A:  BRA    0142
....................       address=LCD_LINE_TWO; 
013C:  MOVLW  40
013E:  MOVWF  0F
....................    else 
0140:  BRA    0144
....................       address=0; 
0142:  CLRF   0F
....................       
....................    address+=x-1; 
0144:  MOVLW  01
0146:  SUBWF  0D,W
0148:  ADDWF  0F,F
....................    lcd_send_byte(0,0x80|address); 
014A:  MOVF   0F,W
014C:  IORLW  80
014E:  MOVWF  10
0150:  CLRF   11
0152:  MOVWF  12
0154:  RCALL  00A2
.................... } 
0156:  RETLW  00
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0158:  MOVF   0C,W
015A:  XORLW  0C
015C:  BZ    0168
015E:  XORLW  06
0160:  BZ    0178
0162:  XORLW  02
0164:  BZ    0184
0166:  BRA    018E
....................       case '\f'   :  lcd_send_byte(0,1); 
0168:  CLRF   11
016A:  MOVLW  01
016C:  MOVWF  12
016E:  RCALL  00A2
....................                      delay_ms(2); 
0170:  MOVLW  02
0172:  MOVWF  0D
0174:  RCALL  0018
....................                      break; 
0176:  BRA    019A
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0178:  MOVLW  01
017A:  MOVWF  0D
017C:  MOVLW  02
017E:  MOVWF  0E
0180:  RCALL  0136
0182:  BRA    019A
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0184:  CLRF   11
0186:  MOVLW  10
0188:  MOVWF  12
018A:  RCALL  00A2
018C:  BRA    019A
....................       
....................       default     : lcd_send_byte(1,c);     break; 
018E:  MOVLW  01
0190:  MOVWF  11
0192:  MOVFF  0C,12
0196:  RCALL  00A2
0198:  BRA    019A
....................    } 
.................... } 
019A:  RETLW  00
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
.................... int n=0; 
.................... int x=4; 
....................  
.................... void main() 
.................... { 
*
028E:  CLRF   FF8
0290:  BCF    FD0.7
0292:  CLRF   FEA
0294:  CLRF   FE9
0296:  MOVLW  70
0298:  MOVWF  FD3
029A:  MOVF   FD3,W
029C:  CLRF   04
029E:  MOVLW  04
02A0:  MOVWF  05
02A2:  MOVF   FC1,W
02A4:  ANDLW  C0
02A6:  IORLW  0F
02A8:  MOVWF  FC1
02AA:  MOVLW  07
02AC:  MOVWF  FB4
....................    lcd_init(); 
02AE:  BRA    00D6
....................  
....................  
....................  
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
02B0:  MOVF   FC1,W
02B2:  ANDLW  C0
02B4:  IORLW  0F
02B6:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2); 
02B8:  BCF    FC0.0
02BA:  BCF    FC0.1
02BC:  BCF    FC0.2
02BE:  BCF    FC0.7
02C0:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
02C2:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
02C4:  BCF    FC6.5
02C6:  BCF    F94.7
02C8:  BSF    F93.0
02CA:  BCF    F93.1
02CC:  MOVLW  01
02CE:  MOVWF  FC6
02D0:  MOVLW  00
02D2:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
02D4:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
02D6:  MOVLW  80
02D8:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
02DA:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
02DC:  MOVLW  00
02DE:  MOVWF  FCA
02E0:  MOVLW  00
02E2:  MOVWF  FCB
....................    setup_comparator(NC_NC_NC_NC); 
02E4:  MOVLW  07
02E6:  MOVWF  FB4
02E8:  MOVF   F92,W
02EA:  MOVWF  F92
02EC:  MOVLW  06
02EE:  MOVWF  00
02F0:  DECFSZ 00,F
02F2:  BRA    02F0
02F4:  NOP   
02F6:  MOVF   FB4,W
02F8:  BCF    FA1.6
....................    setup_vref(FALSE); 
02FA:  CLRF   FB5
....................    setup_oscillator(OSC_8MHZ|OSC_INTRC|OSC_31250|OSC_PLL_OFF); 
02FC:  MOVLW  72
02FE:  MOVWF  FD3
0300:  MOVLW  80
0302:  MOVWF  F9B
0304:  MOVF   FD3,W
....................  
....................    // TODO: USER CODE!! 
....................       set_tris_b(0xF0); 
0306:  MOVLW  F0
0308:  MOVWF  F93
....................     
....................    while(1){ 
....................        
....................       output_high(PIN_B0); 
030A:  BCF    F93.0
030C:  BSF    F8A.0
....................       output_high(PIN_B1); 
030E:  BCF    F93.1
0310:  BSF    F8A.1
....................        
....................       if(input(PIN_B4)||input(PIN_B5)||input(PIN_B6)){ 
0312:  BSF    F93.4
0314:  BTFSC  F81.4
0316:  BRA    0324
0318:  BSF    F93.5
031A:  BTFSC  F81.5
031C:  BRA    0324
031E:  BSF    F93.6
0320:  BTFSS  F81.6
0322:  BRA    0380
....................        
....................          output_low(PIN_B0); 
0324:  BCF    F93.0
0326:  BCF    F8A.0
....................          output_low(PIN_B1); 
0328:  BCF    F93.1
032A:  BCF    F8A.1
....................           
....................          output_high(PIN_B0); 
032C:  BCF    F93.0
032E:  BSF    F8A.0
....................          if(input(PIN_B4)) 
0330:  BSF    F93.4
0332:  BTFSS  F81.4
0334:  BRA    033A
....................          n=1; 
0336:  MOVLW  01
0338:  MOVWF  04
....................          if(input(PIN_B5)) 
033A:  BSF    F93.5
033C:  BTFSS  F81.5
033E:  BRA    0344
....................          n=2; 
0340:  MOVLW  02
0342:  MOVWF  04
....................          if(input(PIN_B6)) 
0344:  BSF    F93.6
0346:  BTFSS  F81.6
0348:  BRA    034E
....................          n=3; 
034A:  MOVLW  03
034C:  MOVWF  04
....................          output_low(PIN_B0); 
034E:  BCF    F93.0
0350:  BCF    F8A.0
....................           
....................          output_high(PIN_B1); 
0352:  BCF    F93.1
0354:  BSF    F8A.1
....................          if(input(PIN_B4)) 
0356:  BSF    F93.4
0358:  BTFSS  F81.4
035A:  BRA    0360
....................          n=4; 
035C:  MOVLW  04
035E:  MOVWF  04
....................          if(input(PIN_B5)) 
0360:  BSF    F93.5
0362:  BTFSS  F81.5
0364:  BRA    036A
....................          n=5; 
0366:  MOVLW  05
0368:  MOVWF  04
....................          if(input(PIN_B6)) 
036A:  BSF    F93.6
036C:  BTFSS  F81.6
036E:  BRA    0374
....................          n=6; 
0370:  MOVLW  06
0372:  MOVWF  04
....................          output_low(PIN_B1); 
0374:  BCF    F93.1
0376:  BCF    F8A.1
....................           
....................          delay_ms(150); 
0378:  MOVLW  96
037A:  MOVWF  0D
037C:  RCALL  0018
....................          x++; 
037E:  INCF   05,F
....................       } 
....................       if(x>20){ 
0380:  MOVF   05,W
0382:  SUBLW  14
0384:  BC    0390
....................          printf(lcd_putc,"\f"); 
0386:  MOVLW  0C
0388:  MOVWF  0C
038A:  RCALL  0158
....................          x=5; 
038C:  MOVLW  05
038E:  MOVWF  05
....................       } 
....................       lcd_gotoxy(x,1); 
0390:  MOVFF  05,0D
0394:  MOVLW  01
0396:  MOVWF  0E
0398:  RCALL  0136
....................       if (n!=0) 
039A:  MOVF   04,F
039C:  BZ    03A8
....................          printf(lcd_putc,"%i",n); 
039E:  MOVFF  04,06
03A2:  MOVLW  1F
03A4:  MOVWF  07
03A6:  BRA    01C4
....................       delay_ms(150); 
03A8:  MOVLW  96
03AA:  MOVWF  0D
03AC:  RCALL  0018
....................    } 
03AE:  BRA    030A
.................... } 
03B0:  SLEEP 

Configuration Fuses:
   Word  1: C83F   INTRC_IO IESO FCMEN PLL12 CPUDIV4 USBDIV
   Word  2: 0E38   NOBROWNOUT WDT128 NOWDT BORV20 PUT VREGEN
   Word  3: 0500   NOPBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 00A1   STVREN NODEBUG NOLVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
