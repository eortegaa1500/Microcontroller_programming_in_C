CCS PCH C Compiler, Version 4.104, 5967               21-mar.-18 13:11

               Filename: I:\Archivos\PIC\Clase5\lcd1_2\main.lst

               ROM used: 864 bytes (3%)
                         Largest free fragment is 31900
               RAM used: 23 (1%) at main() level
                         34 (2%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   026C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... #include "I:\Archivos\PIC\Clase5\lcd1_2\main.h" 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES INTRC_IO              	//Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES PUT                   	//Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN              	//PORTB pins are configured as digital I/O on RESET 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES NOMCLR                	//Master Clear pin used for I/O 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                 	//Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES ICPRT                 	//ICPRT enabled 
....................  
.................... #use delay(clock=8000000) 
*
00C8:  CLRF   FEA
00CA:  MOVLW  19
00CC:  MOVWF  FE9
00CE:  MOVF   FEF,W
00D0:  BZ    00EC
00D2:  MOVLW  02
00D4:  MOVWF  01
00D6:  CLRF   00
00D8:  DECFSZ 00,F
00DA:  BRA    00D8
00DC:  DECFSZ 01,F
00DE:  BRA    00D6
00E0:  MOVLW  97
00E2:  MOVWF  00
00E4:  DECFSZ 00,F
00E6:  BRA    00E4
00E8:  DECFSZ FEF,F
00EA:  BRA    00D2
00EC:  RETLW  00
....................  
....................  
.................... #int_EXT 
.................... #define re 70 
....................  
.................... /*int x=1; 
.................... int m=2; 
.................... int i=1; 
.................... int y=1;*/    
....................  
....................  
....................  
.................... void  EXT_isr(void)  
.................... { 
....................  
.................... } 
....................  
....................  
....................  
.................... #define LCD_TYPE 2 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
*
00B4:  BCF    FF2.1
00B6:  GOTO   0054
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0114:  MOVLW  0F
0116:  ANDWF  F95,W
0118:  IORLW  F0
011A:  MOVWF  F95
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
011C:  BSF    F8C.2
....................    delay_cycles(1); 
011E:  NOP   
....................    lcd_output_enable(1); 
0120:  BSF    F8C.0
....................    delay_cycles(1); 
0122:  NOP   
....................    high = lcd_read_nibble(); 
0124:  RCALL  0108
0126:  MOVFF  01,20
....................        
....................    lcd_output_enable(0); 
012A:  BCF    F8C.0
....................    delay_cycles(1); 
012C:  NOP   
....................    lcd_output_enable(1); 
012E:  BSF    F8C.0
....................    delay_us(1); 
0130:  BRA    0132
....................    low = lcd_read_nibble(); 
0132:  RCALL  0108
0134:  MOVFF  01,1F
....................        
....................    lcd_output_enable(0); 
0138:  BCF    F8C.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
013A:  MOVLW  0F
013C:  ANDWF  F95,W
013E:  MOVWF  F95
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0140:  SWAPF  20,W
0142:  MOVWF  00
0144:  MOVLW  F0
0146:  ANDWF  00,F
0148:  MOVF   00,W
014A:  IORWF  1F,W
014C:  MOVWF  01
.................... } 
014E:  GOTO   0156 (RETURN)
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0108:  MOVF   F83,W
010A:  MOVWF  00
010C:  SWAPF  00,W
010E:  ANDLW  0F
0110:  MOVWF  01
....................   #endif 
.................... } 
0112:  RETLW  00
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
00EE:  SWAPF  20,W
00F0:  ANDLW  F0
00F2:  MOVWF  00
00F4:  MOVLW  0F
00F6:  ANDWF  F8C,W
00F8:  IORWF  00,W
00FA:  MOVWF  F8C
....................   #endif 
....................        
....................    delay_cycles(1); 
00FC:  NOP   
....................    lcd_output_enable(1); 
00FE:  BSF    F8C.0
....................    delay_us(2); 
0100:  BRA    0102
0102:  BRA    0104
....................    lcd_output_enable(0); 
0104:  BCF    F8C.0
.................... } 
0106:  RETLW  00
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
0152:  BCF    F8C.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0154:  BRA    0114
0156:  MOVFF  01,1F
015A:  BTFSC  01.7
015C:  BRA    0154
....................    lcd_output_rs(address); 
015E:  BCF    F8C.1
0160:  BTFSC  1D.0
0162:  BSF    F8C.1
....................    delay_cycles(1); 
0164:  NOP   
....................    lcd_output_rw(0); 
0166:  BCF    F8C.2
....................    delay_cycles(1); 
0168:  NOP   
....................    lcd_output_enable(0); 
016A:  BCF    F8C.0
....................    lcd_send_nibble(n >> 4); 
016C:  SWAPF  1E,W
016E:  MOVWF  1F
0170:  MOVLW  0F
0172:  ANDWF  1F,F
0174:  MOVFF  1F,20
0178:  RCALL  00EE
....................    lcd_send_nibble(n & 0xf); 
017A:  MOVF   1E,W
017C:  ANDLW  0F
017E:  MOVWF  1F
0180:  MOVWF  20
0182:  RCALL  00EE
.................... } 
0184:  RETLW  00
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0186:  MOVLW  0F
0188:  ANDWF  F95,W
018A:  MOVWF  F95
....................   #endif 
....................    lcd_enable_tris(); 
018C:  BCF    F95.0
....................    lcd_rs_tris(); 
018E:  BCF    F95.1
....................    lcd_rw_tris(); 
0190:  BCF    F95.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0192:  BCF    F8C.1
....................    lcd_output_rw(0); 
0194:  BCF    F8C.2
....................    lcd_output_enable(0); 
0196:  BCF    F8C.0
....................      
....................    delay_ms(15); 
0198:  MOVLW  0F
019A:  MOVWF  19
019C:  RCALL  00C8
....................    for(i=1;i<=3;++i) 
019E:  MOVLW  01
01A0:  MOVWF  16
01A2:  MOVF   16,W
01A4:  SUBLW  03
01A6:  BNC   01B8
....................    { 
....................        lcd_send_nibble(3); 
01A8:  MOVLW  03
01AA:  MOVWF  20
01AC:  RCALL  00EE
....................        delay_ms(5); 
01AE:  MOVLW  05
01B0:  MOVWF  19
01B2:  RCALL  00C8
....................    } 
01B4:  INCF   16,F
01B6:  BRA    01A2
....................      
....................    lcd_send_nibble(2); 
01B8:  MOVLW  02
01BA:  MOVWF  20
01BC:  RCALL  00EE
....................    for(i=0;i<=3;++i) 
01BE:  CLRF   16
01C0:  MOVF   16,W
01C2:  SUBLW  03
01C4:  BNC   01E2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01C6:  CLRF   03
01C8:  MOVF   16,W
01CA:  MOVFF  FF2,17
01CE:  BCF    FF2.7
01D0:  RCALL  0096
01D2:  BTFSC  17.7
01D4:  BSF    FF2.7
01D6:  MOVWF  17
01D8:  CLRF   1D
01DA:  MOVWF  1E
01DC:  RCALL  0152
01DE:  INCF   16,F
01E0:  BRA    01C0
.................... } 
01E2:  GOTO   028A (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
01E6:  DECFSZ 1A,W
01E8:  BRA    01EC
01EA:  BRA    01F2
....................       address=LCD_LINE_TWO; 
01EC:  MOVLW  40
01EE:  MOVWF  1B
....................    else 
01F0:  BRA    01F4
....................       address=0; 
01F2:  CLRF   1B
....................       
....................    address+=x-1; 
01F4:  MOVLW  01
01F6:  SUBWF  19,W
01F8:  ADDWF  1B,F
....................    lcd_send_byte(0,0x80|address); 
01FA:  MOVF   1B,W
01FC:  IORLW  80
01FE:  MOVWF  1C
0200:  CLRF   1D
0202:  MOVWF  1E
0204:  RCALL  0152
.................... } 
0206:  RETLW  00
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0208:  MOVF   18,W
020A:  XORLW  0C
020C:  BZ    0218
020E:  XORLW  06
0210:  BZ    0228
0212:  XORLW  02
0214:  BZ    0234
0216:  BRA    023E
....................       case '\f'   :  lcd_send_byte(0,1); 
0218:  CLRF   1D
021A:  MOVLW  01
021C:  MOVWF  1E
021E:  RCALL  0152
....................                      delay_ms(2); 
0220:  MOVLW  02
0222:  MOVWF  19
0224:  RCALL  00C8
....................                      break; 
0226:  BRA    024A
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0228:  MOVLW  01
022A:  MOVWF  19
022C:  MOVLW  02
022E:  MOVWF  1A
0230:  RCALL  01E6
0232:  BRA    024A
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0234:  CLRF   1D
0236:  MOVLW  10
0238:  MOVWF  1E
023A:  RCALL  0152
023C:  BRA    024A
....................       
....................       default     : lcd_send_byte(1,c);     break; 
023E:  MOVLW  01
0240:  MOVWF  1D
0242:  MOVFF  18,1E
0246:  RCALL  0152
0248:  BRA    024A
....................    } 
.................... } 
024A:  RETLW  00
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... void main() 
.................... { 
*
026C:  CLRF   FF8
026E:  BCF    FD0.7
0270:  BSF    07.7
0272:  CLRF   FEA
0274:  CLRF   FE9
0276:  MOVLW  70
0278:  MOVWF  FD3
027A:  MOVF   FD3,W
027C:  MOVF   FC1,W
027E:  ANDLW  C0
0280:  IORLW  0F
0282:  MOVWF  FC1
0284:  MOVLW  07
0286:  MOVWF  FB4
....................    lcd_init(); 
0288:  BRA    0186
....................  
....................  
....................  
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
028A:  MOVF   FC1,W
028C:  ANDLW  C0
028E:  IORLW  0F
0290:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2); 
0292:  BCF    FC0.0
0294:  BCF    FC0.1
0296:  BCF    FC0.2
0298:  BCF    FC0.7
029A:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
029C:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
029E:  BCF    FC6.5
02A0:  BCF    F94.7
02A2:  BSF    F93.0
02A4:  BCF    F93.1
02A6:  MOVLW  01
02A8:  MOVWF  FC6
02AA:  MOVLW  00
02AC:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
02AE:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
02B0:  MOVLW  80
02B2:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
02B4:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
02B6:  MOVLW  00
02B8:  MOVWF  FCA
02BA:  MOVLW  00
02BC:  MOVWF  FCB
....................    setup_comparator(NC_NC_NC_NC); 
02BE:  MOVLW  07
02C0:  MOVWF  FB4
02C2:  MOVF   F92,W
02C4:  MOVWF  F92
02C6:  MOVLW  06
02C8:  MOVWF  00
02CA:  DECFSZ 00,F
02CC:  BRA    02CA
02CE:  NOP   
02D0:  MOVF   FB4,W
02D2:  BCF    FA1.6
....................    setup_vref(FALSE); 
02D4:  CLRF   FB5
....................    enable_interrupts(INT_EXT); 
02D6:  BSF    FF2.4
....................    enable_interrupts(GLOBAL); 
02D8:  MOVLW  C0
02DA:  IORWF  FF2,F
....................    setup_oscillator(OSC_8MHZ|OSC_INTRC|OSC_31250|OSC_PLL_OFF); 
02DC:  MOVLW  72
02DE:  MOVWF  FD3
02E0:  MOVLW  80
02E2:  MOVWF  F9B
02E4:  MOVF   FD3,W
....................  
....................    // TODO: USER CODE!! 
....................     
....................    set_tris_d(0x00); 
02E6:  MOVLW  00
02E8:  MOVWF  F95
....................    set_tris_a(0xFF); 
02EA:  MOVLW  FF
02EC:  MOVWF  F92
....................    set_tris_b(0x00); 
02EE:  MOVLW  00
02F0:  MOVWF  F93
....................     
....................    while(1){    
....................       /*lcd_gotoxy(m,i); 
....................       printf(lcd_putc,"*"); 
....................       delay_ms(re); 
....................       printf(lcd_putc,"\f");       
....................       m=m+x; 
....................       i=i+y; 
....................        
....................       if(m==1||m==16){ 
....................          x*=-1; 
....................       } 
....................       if(i==2||i==1){ 
....................          y*=-1; 
....................       }*/ 
....................        
....................       lcd_gotoxy(6,1); 
02F2:  MOVLW  06
02F4:  MOVWF  19
02F6:  MOVLW  01
02F8:  MOVWF  1A
02FA:  RCALL  01E6
....................       printf(lcd_putc,"\fLalo"); 
02FC:  MOVLW  BA
02FE:  MOVWF  FF6
0300:  MOVLW  00
0302:  MOVWF  FF7
0304:  RCALL  024C
....................       delay_ms(500); 
0306:  MOVLW  02
0308:  MOVWF  16
030A:  MOVLW  FA
030C:  MOVWF  19
030E:  RCALL  00C8
0310:  DECFSZ 16,F
0312:  BRA    030A
....................       lcd_gotoxy(7,1); 
0314:  MOVLW  07
0316:  MOVWF  19
0318:  MOVLW  01
031A:  MOVWF  1A
031C:  RCALL  01E6
....................       printf(lcd_putc,"\fel"); 
031E:  MOVLW  0C
0320:  MOVWF  18
0322:  RCALL  0208
0324:  MOVLW  65
0326:  MOVWF  18
0328:  RCALL  0208
032A:  MOVLW  6C
032C:  MOVWF  18
032E:  RCALL  0208
....................       delay_ms(500); 
0330:  MOVLW  02
0332:  MOVWF  16
0334:  MOVLW  FA
0336:  MOVWF  19
0338:  RCALL  00C8
033A:  DECFSZ 16,F
033C:  BRA    0334
....................       lcd_gotoxy(6,1); 
033E:  MOVLW  06
0340:  MOVWF  19
0342:  MOVLW  01
0344:  MOVWF  1A
0346:  RCALL  01E6
....................       printf(lcd_putc,"\fchido"); 
0348:  MOVLW  C0
034A:  MOVWF  FF6
034C:  MOVLW  00
034E:  MOVWF  FF7
0350:  RCALL  024C
....................       delay_ms(500); 
0352:  MOVLW  02
0354:  MOVWF  16
0356:  MOVLW  FA
0358:  MOVWF  19
035A:  RCALL  00C8
035C:  DECFSZ 16,F
035E:  BRA    0356
....................        
....................        
....................        
....................    } 
0360:  BRA    02F2
.................... } 
....................  
....................  
0362:  SLEEP 

Configuration Fuses:
   Word  1: C83F   INTRC_IO IESO FCMEN PLL12 CPUDIV4 USBDIV
   Word  2: 0E38   NOBROWNOUT WDT128 NOWDT BORV20 PUT VREGEN
   Word  3: 0500   NOPBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 00A1   STVREN NODEBUG NOLVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
